<div class="container mt-4">
    <div class="d-flex align-items-center justify-content-center">
        <div class="p-2 flex-shrink-1 ms-auto">
            <!-- Button trigger modal -->
            <button type="button" class="btn btn-export" data-bs-toggle="modal" data-bs-target="#staticBackdrop">
                Xuất ebook
            </button>
        </div>
        <!-- Modal -->
        <div class="modal fade" id="staticBackdrop" data-bs-backdrop="static" data-bs-keyboard="false" tabindex="-1"
            aria-labelledby="staticBackdropLabel" aria-hidden="true">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h4 class="modal-title text-center w-100">Xuất ebook</h4>
                        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                    </div>
                    <div class="modal-body">
                        <form id="signup-form">
                            <li class="d-flex justify-content: space-between; align-items-center mt-2">
                                <a class="dropdown-export-text"><strong>Chọn chương</strong></a>
                                <select class="form-select custom-select-export " aria-label="Default select example">
                                    <option value="All" selected>All</option>
                                    <option value="chap1">Chương 1</option>
                                    <option value="chap2">Chương 2</option>
                                    <option value="chap3">Chương 3</option>
                                </select>
                            </li>
                            <li class="d-flex justify-content: space-between; align-items-center mt-2">
                                <a class="dropdown-export-text"><strong>Dạng tập tin</strong></a>
                                <select class="form-select custom-select-export " aria-label="Default select example">
                                    <option value="prc" selected>prc</option>
                                    <option value="epub">epub</option>
                                    <option value="pdf">pdf</option>
                                </select>
                            </li>
                            <div class="d-grid gap-2 col-4 mx-auto mt-3">
                                <button type="button" class="btn btn-export-file">Xuất file</button>
                            </div>
                        </form>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div class="name-novel">
        {{content.storyName}}
    </div>
    <div class="text-name-chap text-center">
        {{content.chapterTitle}}
    </div>
</div>

<div id="background-div" class="text-center mt-4" style="background-color: #EFF8FE;">
    <br>
    <p>Nếu không xem được truyện vui lòng đổi <strong>“SERVER ẢNH”</strong> bên dưới</p>
    <button type="button" class="btn btn-success mb-4">Server 1</button>
    <button type="button" class="btn btn-primary mb-4" style="margin-left: 30px;">Server 2</button>
</div>

<div class="container mt-4 mb-4">
    <nav aria-label="Page navigation example">
        <ul class="pagination justify-content-center">
            <li class="page-item">
                <a class="page-link select-chapter" href="{{currentNovel}}/chuong-{{extract currentChapter 1}}" aria-label="Previous">
                    <span aria-hidden="true"><i class="fa-solid fa-angles-left"></i> Chương trước</span>
                </a>
            </li>
            <li class="page-item">
                <select id="chapterSelect" class="form-select select-chapter" aria-label="Default select example">
                    <option selected>Chương {{currentChapter}}</option>
                    {{#each chapters}}
                    <option value="{{this.chapterTitle}}" data-href="/{{this.chapterSlug}}/">Chương {{sum @index 1}}</option></a>
                    {{/each}}
                </select>
            </li>
            <li class="page-item">
                <a class="page-link select-chapter" href="{{currentNovel}}/chuong-{{sum currentChapter 1}}" aria-label="Next">
                    <span aria-hidden="true">Chương sau <i class="fa-solid fa-angles-right"></i></span>
                </a>
            </li>
        </ul>
    </nav>

    <div  id="text-content" class="text-content text-justify mb-4">
        {{{convertToHtml content.chapterContent}}}
    </div>

    <nav aria-label="Page navigation example">
        <ul class="pagination justify-content-center">
            <li class="page-item">
                <a class="page-link select-chap" href="#" aria-label="Previous">
                    <span aria-hidden="true"><i class="fa-solid fa-angles-left"></i> Chương trước</span>
                </a>
            </li>
            <li class="page-item">
                <select id="chapterSelect1" class="form-select select-chapter" aria-label="Default select example">
                    <option selected>Chương {{currentChapter}}</option>
                    {{#each chapters}}
                    <option value="{{this.chapterTitle}}" data-href="/{{this.chapterSlug}}/">Chương {{sum @index 1}}</option></a>
                    {{/each}}
                </select>
            </li>
            <li class="page-item">
                <a class="page-link select-chap" href="#" aria-label="Next">
                    <span aria-hidden="true">Chương sau <i class="fa-solid fa-angles-right"></i></span>
                </a>
            </li>
        </ul>
    </nav>
</div>
<script>
    document.addEventListener('DOMContentLoaded', function() {
    const chapterSelect = document.getElementById('chapterSelect');
     const chapterSelect1 = document.getElementById('chapterSelect1');
    
    chapterSelect.addEventListener('change', function() {
        const selectedOption = chapterSelect.options[chapterSelect.selectedIndex];
        const url = selectedOption.getAttribute('data-href');
        
        if (url) {
            window.location.href = url;
        }
    });

    chapterSelect1.addEventListener('change', function() {
        const selectedOption = chapterSelect.options[chapterSelect.selectedIndex];
        const url = selectedOption.getAttribute('data-href');
        
        if (url) {
            window.location.href = url;
        }
    });
});

    /*Thay đổi màu nền*/
    var backgroundColorSelect = document.querySelector("#background-color-select");
    var backgroundDiv = document.querySelector("#background-div");

    // Gán sự kiện onchange cho select element
    backgroundColorSelect.addEventListener("change", function () {
        // Lấy giá trị màu nền được chọn
        var selectedBackgroundColor = backgroundColorSelect.value;

        // Lưu giá trị màu nền vào localStorage
        localStorage.setItem("selectedBackgroundColor", selectedBackgroundColor);

        // Áp dụng màu nền đã chọn
        applySelectedBackgroundColor();
    });

    // Hàm áp dụng màu nền đã chọn
    function applySelectedBackgroundColor() {
        // Lấy giá trị màu nền đã lưu từ localStorage
        var storedBackgroundColor = localStorage.getItem("selectedBackgroundColor");

        // Nếu giá trị màu nền đã được lưu
        if (storedBackgroundColor) {
            // Lấy phần tử body
            var bodyElement = document.querySelector("body");

            // Xóa tất cả các lớp màu nền hiện tại
            bodyElement.classList.remove("bg-white", "bg-cream", "bg-peachpuff", "bg-gray", "bg-dark");

            // Thêm lớp màu nền mới từ giá trị đã lưu
            bodyElement.classList.add(storedBackgroundColor);

            // Cập nhật giá trị được chọn trên dropdown menu
            backgroundColorSelect.value = storedBackgroundColor;

            // Áp dụng màu nền đã chọn cho phần tử div
            backgroundDiv.style.backgroundColor = storedBackgroundColor === "bg-white" ? "#EFF8FE" : "white";
        }
    }

    // Áp dụng màu nền đã chọn khi trang được tải lại
    applySelectedBackgroundColor();


    /*Thay đổi cỡ chữ*/
    var textContentSelect = document.querySelector("#text-content-select");

    // Gán sự kiện onchange cho select element
    textContentSelect.addEventListener("change", function () {
        // Lấy giá trị lựa chọn
        var selectedValue = textContentSelect.value;

        // Lưu giá trị lựa chọn vào localStorage
        localStorage.setItem("selectedTextSize", selectedValue);

        // Áp dụng lựa chọn cho text-content
        applySelectedTextContent(selectedValue);
    });

    // Hàm áp dụng lựa chọn text-content
    function applySelectedTextContent(selectedValue) {
        // Lấy phần tử text-content
        var textContentElement = document.querySelector("#text-content");

        // Xóa tất cả các lớp text-content hiện tại
        textContentElement.classList.remove("size-16", "size-18", "size-20", "size-22", "size-24", "size-26", "size-28", "size-30", "size-32", "size-34", "size-36", "size-38", "size-40");

        // Thêm lớp text-content mới từ giá trị đã chọn
        textContentElement.classList.add(selectedValue);
    }

    // Áp dụng lựa chọn text-content khi trang được tải lại
    var storedTextSize = localStorage.getItem("selectedTextSize");
    if (storedTextSize) {
        applySelectedTextContent(storedTextSize);
    } else {
        // Nếu chưa có giá trị được lưu, áp dụng giá trị mặc định
        applySelectedTextContent(textContentSelect.value);
    }

    /*Thay đổi font chữ*/
    var fontSelect = document.querySelector("#font-select");

    // Gán sự kiện onchange cho select element
    fontSelect.addEventListener("change", function () {
        // Lấy giá trị lựa chọn
        var selectedFont = fontSelect.value;

        // Lưu giá trị lựa chọn vào localStorage
        localStorage.setItem("selectedFont", selectedFont);

        // Áp dụng lựa chọn cho font chữ
        applySelectedFont(selectedFont);
    });

    // Hàm áp dụng lựa chọn font chữ
    function applySelectedFont(selectedFont) {
        // Lấy phần tử text-content
        var textContentElement = document.querySelector("#text-content");

        // Xóa tất cả các lớp font chữ hiện tại
        textContentElement.classList.remove("font-roboto", "font-timesnewroman", "font-helvetica", "font-arial");

        // Thêm lớp font chữ mới từ giá trị đã chọn
        textContentElement.classList.add(selectedFont);
    }

    // Áp dụng lựa chọn font chữ khi trang được tải lại
    var storedFont = localStorage.getItem("selectedFont");
    if (storedFont) {
        applySelectedFont(storedFont);
    } else {
        // Nếu chưa có giá trị được lưu, áp dụng giá trị mặc định
        applySelectedFont(fontSelect.value);
    }

    /* Thay đổi màu chữ*/
    var textColorSelect = document.querySelector("#text-color-select");

    // Gán sự kiện onchange cho select element
    textColorSelect.addEventListener("change", function () {
        // Lấy giá trị lựa chọn
        var selectedColor = textColorSelect.value;

        // Lưu giá trị lựa chọn vào localStorage
        localStorage.setItem("selectedColor", selectedColor);

        // Áp dụng lựa chọn cho màu chữ
        applySelectedTextColor(selectedColor);
    });

    // Hàm áp dụng lựa chọn màu chữ
    function applySelectedTextColor(selectedColor) {
        // Lấy phần tử text-content
        var textContentElement = document.querySelector("#text-content");

        // Xóa tất cả các lớp màu chữ hiện tại
        textContentElement.classList.remove("text-color-black", "text-color-red", "text-color-green", "text-color-blue", "text-color-orange");

        // Thêm lớp màu chữ mới từ giá trị đã chọn
        textContentElement.classList.add(selectedColor);
    }

    // Áp dụng lựa chọn màu chữ khi trang được tải lại
    var storedColor = localStorage.getItem("selectedColor");
    if (storedColor) {
        applySelectedTextColor(storedColor);
    } else {
        // Nếu chưa có giá trị được lưu, áp dụng giá trị mặc định
        applySelectedTextColor(textColorSelect.value);
    }

    /*Thay đổi độ giãn dòng*/
    var lineHeightSelect = document.querySelector("#line-height-select");

    // Gán sự kiện onchange cho select element
    lineHeightSelect.addEventListener("change", function () {
        // Lấy giá trị lựa chọn
        var selectedLineHeight = lineHeightSelect.value;

        // Lưu giá trị lựa chọn vào localStorage
        localStorage.setItem("selectedLineHeight", selectedLineHeight);

        // Áp dụng lựa chọn cho độ giãn dòng
        applySelectedLineHeight(selectedLineHeight);
    });

    // Hàm áp dụng lựa chọn độ giãn dòng
    function applySelectedLineHeight(selectedLineHeight) {
        // Lấy phần tử text-content
        var textContentElement = document.querySelector("#text-content");

        // Xóa tất cả các lớp độ giãn dòng hiện tại
        textContentElement.classList.remove("line-height-1", "line-height-1-1-5", "line-height-1-5", "line-height-2", "line-height-2-5", "line-height-3");

        // Thêm lớp độ giãn dòng mới từ giá trị đã chọn
        textContentElement.classList.add(selectedLineHeight);
    }

    // Áp dụng lựa chọn độ giãn dòng khi trang được tải lại
    var storedLineHeight = localStorage.getItem("selectedLineHeight");
    if (storedLineHeight) {
        applySelectedLineHeight(storedLineHeight);
    } else {
        // Nếu chưa có giá trị được lưu, áp dụng giá trị mặc định
        applySelectedLineHeight(lineHeightSelect.value);
    }
</script>